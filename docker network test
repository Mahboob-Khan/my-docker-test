Explore the Default Network

- List the default networks.

- Run an httpd container named web1 without specifying a network and see which network it uses.

- Attempt to connect to web1 by name and by IP from another container run without a network specified.


$ssh cloud_user@<PUBLIC_IP_ADDRESS>

List the default networks:

docker network ls

Run an httpd container named web1, without specifying a network, and see which network it uses:

$docker run -d --name web1 httpd:2.4

$docker inspect web1

Take note of the IPAddress.

Run a container using the busybox image, and see if you can connect to the web1 server:

$docker run --rm -it busybox

Check the container's networking, and verify it is in the same IP range as web1:

$ip addr

Ping the web1 container using the IP address:

$ ping <WEB1_IP_ADDRESS> // ping will work since same network

Attempt to ping the web1 container by name:

$ping web1 // ping on host name won't work in bridge network

Attempt to access web1 using wget:

$wget <WEB1_IP_ADDRESS> // that work's as long as same network

Exit the container:

$exit



Explore Bridge Networks

- Create a new bridge network named test_application.

- Run an httpd container named web2 in the test_application network.

- Attempt to connect to web2 by name and by IP from another container within the test_application network.

- Attempt to connect to web1 from a container in the test_application network.


Explore Bridge Networks

Create a new bridge network named test_application:

$docker network create test_application

Run an httpd container named web2, in the test_application network:

$docker run -d --name web2 --network test_application httpd:2.4

Check the status of the container:

$docker ps -a

Verify that web2 was added to the test_application network:

$docker inspect web2

Run a container using the busybox image, and see if you can connect to the web2 server, within the test_application network:

$docker run --rm -it --network test_application busybox

Check the container's networking, and verify it is in the same IP range as web2:

$ip addr

Ping the web2 container using the IP address:

$ping <WEB2_IP_ADDRESS> // connect with the ip address

Attempt to ping the web2 container by name:

$ping web2 // non-default bridge network IP also work

Using wget, attempt to access web2 with the hostname:

$wget web2 // able to pull the web page

Attempt to ping web1:

$ping <WEB1_IP_ADDRESS> // web1 will not access as different network

Attempt to access web1 using wget:

$wget <WEB1_IP_ADDRESS> // Since IP not allowed name will not work

Exit the container:

$exit


Explore the Host Network

- Run an httpd container named web3 on the host network.

- Attempt to connect to web3 directly from the server.

- Attempt to connect to web3 from another container on the host network.

- Attempt to connect to web1 and web2 from a container on the host network.


Run an httpd container named web3 on the host network:

$docker run -d --name web3 --network host httpd:2.4

Check the status of the container:

$docker ps -a

Attempt to connect to web3 directly from the server:

$wget localhost // will pull the index file

Stop web3:

$docker stop web3

Attempt to connect to web3 directly from the server again:

$wget localhost // service will not work since web3 is stopped

Start web3:

$docker start web3

Run a container using the busybox image, and see if you can connect to the web3 server:

$docker run --rm -it --network host busybox

$ping web3 //web3 is not published name in host network

Using wget, attempt to access localhost within the busybox image:

$wget localhost // will work

Attempt to ping web2:

$ping <WEB2_IP_ADDRESS> // able to ping as localhost see it as host can accesss all the network

Attempt to ping web1:

$ping <WEB1_IP_ADDRESS> // host network able to acess bridge network



